// main.cpp
#include <iostream>
#include <stdlib.h>

// simple example

// int hello(int x) {
//     return x * 2;
// }
//
// int main() {
//     int result = hello(5);
//     std::cout << "Result: " << result << std::endl;
//     return 0;
// }

//second example


// int hello(int x);
//
// int main() {
//     int result = hello(5);
//     std::cout << "Result: " << result << std::endl;
//     return 0;
// }


//stack_2
// Функция возвращает указатель на локальную переменную в стеке
int* stackMemory1()
{
    int a = 1; // Создается переменная 'a' в стеке и инициализируется значением 1
    return &a; // Возвращается указатель на 'a'
}

// Аналогичная функция с другой локальной переменной
int* stackMemory2()
{
    int b = 2; // Создается переменная 'b' в стеке и инициализируется значением 2
    return &b; // Возвращается указатель на 'b'
}

int main()
{
    int* b = stackMemory1(); // Вызывается функция, возвращающая указатель на локальную переменную 'a'
    int a1 = *b; // Разыменование указателя, значение переменной 'a' присваивается 'a1' (1)

    int* c = stackMemory2(); // Вызывается функция, возвращающая указатель на локальную переменную 'b'
    int a2 = *c; // Разыменование указателя, значение переменной 'b' присваивается 'a2' (2)

    int a3 = *b; // Разыменование указателя, значение переменной 'b' присваивается 'a3' (Технически некорректно, так как 'a' больше не существует)

    std::cout << a1 << std::endl; // Выводится значение 'a1' (1)
    std::cout << a2 << std::endl; // Выводится значение 'a2' (2)
    std::cout << a3 << std::endl; // Выводится значение 'a3' (Технически некорректно, так как 'a' больше не существует)

    // Разность указателей 'b' и 'c' в байтах (на практике, undefined behavior, так как указатели указывают на разные объекты и не могут быть вычитаны)
    std::cout << ((std::byte*) b - (std::byte*) c) << std::endl;

    return 0;
}

